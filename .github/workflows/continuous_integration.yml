name: Continuous Integration

on:
  push:
  pull_request:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    name: ${{ matrix.config.name }} | ${{ matrix.config.build_type }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - name: Visual Studio 2022
          os: windows-2022
          extra_options:
          build_type: Release

        - name: Visual Studio 2022
          os: windows-2022
          extra_options:
          build_type: Debug

        - name: Visual Studio 2019
          os: windows-2019
          extra_options:
          build_type: Release

        - name: macOS
          os: macos-12
          deps_cmdline: brew install libvpx webp
          build_type: Release

        - name: macOS
          os: macos-12
          extra_options: -G Xcode -DDYN_OPENAL=OFF
          deps_cmdline: brew install libvpx webp
          build_type: Debug

        - name: Linux GCC 9
          os: ubuntu-22.04
          extra_options: -DCMAKE_C_COMPILER=gcc-9 -DCMAKE_CXX_COMPILER=g++-9
          deps_cmdline: sudo apt update && sudo apt install libsdl2-dev libvpx-dev libgtk2.0-dev libwebp-dev
          build_type: RelWithDebInfo

        - name: Linux GCC 12
          os: ubuntu-22.04
          extra_options: -DCMAKE_C_COMPILER=gcc-12 -DCMAKE_CXX_COMPILER=g++-12
          deps_cmdline: sudo apt update && sudo apt install libsdl2-dev libvpx-dev libgtk-3-dev libwebp-dev
          build_type: MinSizeRel

        - name: Linux Clang 11
          os: ubuntu-22.04
          extra_options: -DCMAKE_C_COMPILER=clang-11 -DCMAKE_CXX_COMPILER=clang++-11 -DDYN_OPENAL=OFF
          deps_cmdline: sudo apt update && sudo apt install clang-11 libsdl2-dev libvpx-dev libopenal-dev libwebp-dev
          build_type: Debug

        - name: Linux Clang 15
          os: ubuntu-22.04
          extra_options: -DCMAKE_C_COMPILER=clang-15 -DCMAKE_CXX_COMPILER=clang++-15
          deps_cmdline: sudo apt update && sudo apt install clang-15 libsdl2-dev libvpx-dev libwebp-dev
          build_type: Release

    steps:
    - uses: actions/checkout@v4

    - name: Setup vcpkg
      uses: lukka/run-vcpkg@v11
      if: runner.os == 'Windows'
      with:
        vcpkgDirectory: '${{ github.workspace }}/build/vcpkg'
        vcpkgGitCommitId: '2c401863dd54a640aeb26ed736c55489c079323b'

    - name: Setup environment
      if: runner.os == 'Windows'
      shell: bash
      run: echo CMAKE_TOOLCHAIN_FILE="${{ env.VCPKG_ROOT}}/scripts/buildsystems/vcpkg.cmake" >> $GITHUB_ENV

    - name: Install Dependencies
      shell: bash
      run: |
        if [[ -n "${{ matrix.config.deps_cmdline }}" ]]; then
          eval ${{ matrix.config.deps_cmdline }}
        fi
        mkdir -p build
        cd build
        git clone https://github.com/emawind84/ZMusic.git
        cd ZMusic
        git checkout mobile
        cd ..
        cmake -B zmusic_build -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }} -DCMAKE_INSTALL_PREFIX=`pwd`/zmusic_install ZMusic
        cmake --build zmusic_build --target install --parallel 3

    - name: Configure
      shell: bash
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }} -DCMAKE_PREFIX_PATH=`pwd`/build/zmusic_install -DPK3_QUIET_ZIPDIR=ON ${{ matrix.config.extra_options }} .

    - name: Build
      shell: bash
      run: |
        export MAKEFLAGS=--keep-going
        cmake --build build --config ${{ matrix.config.build_type }} --parallel 3

    - name: Create Package
      if: runner.os == 'Windows'  # Remove to make packages of all targets
      shell: bash
      run: |
        cd build
        mkdir package
        if [[ "${{ runner.os }}" == 'Windows' ]]; then
          cp ${{ matrix.config.build_type }}/Selaco.exe ${{ matrix.config.build_type }}/*.pk3 package
        elif [[ "${{ runner.os }}" == 'macOS' ]]; then
          cp -r Selaco.app package
        elif [[ "${{ runner.os }}" == 'Linux' ]]; then
          cp Selaco *.pk3 package
        fi

    - name: Upload Package
      if: runner.os == 'Windows'  # Remove to store packages of all targets
      uses: actions/upload-artifact@v3
      with:
        path: build/package
        name: ${{ matrix.config.name }} ${{ matrix.config.build_type }}

    - name: List Build Directory
      if: always()
      shell: bash
      run: |
        git status
        ls -lR build
